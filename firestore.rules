/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for test reports, combined with
 * a role-based access control for administrative functions. Users can only
 * manage their own test reports, while admins have broader access for reporting and management.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data, with 'userId' matching the Firebase Auth UID.
 * - /users/{userId}/testReports/{reportId}: Stores individual test reports created by each user.
 * - /testReports/{reportId}: Represents the documents within the 'testReports' collection group, not used directly for writing.
 *
 * Key Security Decisions:
 * - User-owned data: Each user can only access their own data under /users/{userId}.
 * - Admin role: The 'Admin' role grants broader access to test reports.
 * - Collection Group: Rules are applied to the 'testReports' collection group to enable queries across all reports.
 * - No public user listing: Listing users is not permitted.
 *
 * Denormalization for Authorization:
 * The 'TestReport' entity includes the `enteredBy` field, which stores the user ID of the report creator.
 * This denormalization enables efficient owner-based access control without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing document.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the authenticated user has the 'Admin' role.
     */
    function isAdmin() {
      return request.auth.token.role == 'Admin';
    }

    /**
     * @description Rules for user profile documents.
     * @path /users/{userId}
     * @allow (create) Authenticated user can create their own profile.
     * @allow (get) Authenticated user can read their own profile.
     * @allow (update) Authenticated user can update their own profile.
     * @allow (delete) Authenticated user can delete their own profile.
     * @deny (create) User tries to create a profile with a mismatched UID.
     * @deny (get) User tries to read another user's profile.
     * @principle Enforces document ownership for user profiles and restricts access to only the owner.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for test reports collection group.
     * @path /testReports/{reportId}
     * @allow (list) Admins can list all test reports. Users can list their own testReports
     * @allow (get) Admins can get all test reports. Users can get their own testReports
     * @deny (create) Non-admins cannot create test reports here directly (must be via user subcollection).
     */
    match /testReports/{reportId} {
       allow get: if isAdmin() || (isSignedIn() && resource.data.enteredBy == request.auth.uid);
       allow list: if isAdmin() || (isSignedIn() && resource.data.enteredBy == request.auth.uid);
       allow create: if false;
       allow update: if false;
       allow delete: if false;
    }

    /**
     * @description Rules for test reports subcollection under each user.
     * @path /users/{userId}/testReports/{reportId}
     * @allow (create) Authenticated user can create a test report under their own profile.
     * @allow (get) Authenticated user can read their own test report.
     * @allow (update) Authenticated user can update their own test report.
     * @allow (delete) Authenticated user can delete their own test report.
     * @deny (create) User tries to create a test report with a mismatched userId.
     * @deny (get) User tries to read another user's test report.
     * @principle Enforces document ownership for test reports and restricts access to only the owner or admin.
     */
     match /users/{userId}/testReports/{reportId} {
       allow get: if isOwner(userId);
       allow list: if isOwner(userId);
       allow create: if isOwner(userId) && request.resource.data.enteredBy == userId;
       allow update: if isExistingOwner(userId) && request.resource.data.enteredBy == resource.data.enteredBy;
       allow delete: if isExistingOwner(userId);
     }
  }
}