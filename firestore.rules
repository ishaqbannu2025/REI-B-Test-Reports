rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user profile information.
     * @path /users/{userId}
     * @allow (create) - If the user's auth UID matches the userId.
     * @allow (get, update, delete) - If the user is the owner (auth UID matches userId).
     * @deny (list) - Listing users is not allowed.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      // Helper function to check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the resource.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Secures test reports under a specific user.
     * @path /users/{userId}/testReports/{testReportId}
     * @allow (create) - If the user is the owner (auth UID matches userId) AND the `enteredBy` field matches the `userId`.
     * @allow (get, list) - If the user is the owner (auth UID matches userId).
     * @allow (update, delete) - If the user is the owner (auth UID matches userId) and the document exists.
     * @deny (create) - If the `enteredBy` field does not match the `userId`.
     * @deny (update, delete) - If the document does not exist.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree, validates relational integrity between documents.
     */
    match /users/{userId}/testReports/{testReportId} {
      // Helper function to check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the resource.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }


      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.enteredBy == userId;
      allow update: if isOwner(userId) && exists(resource.data);
      allow delete: if isOwner(userId) && exists(resource.data);
    }

    /**
     * @description Allows admins to query all test reports using a collection group query.
     * @path /users/{userId}/testReports/{testReportId} (via collection group testReports)
     * @allow (get, list) - Allows all users who are authenticated.
     * @deny (create, update, delete) - Not applicable at the collection group level. Operations are governed by rules on individual documents.
     * @principle Enables administrative access to all test reports while still enforcing security at the document level.
     */
    match /{path=**}/testReports/{testReportId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn();
      allow list: if isSignedIn();
    }
  }
}