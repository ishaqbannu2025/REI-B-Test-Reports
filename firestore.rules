/**
 * @fileoverview Firestore Security Rules for Electrical Test Reports.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for test reports while allowing administrative access.
 * Users can only create, read, update, and delete test reports that they own.
 *
 * Data Structure:
 * - Users are stored in the `/users/{userId}` collection, where `{userId}` matches the Firebase Auth UID.
 * - Test reports are stored in the `/users/{userId}/testReports/{testReportId}` subcollection.
 *
 * Key Security Decisions:
 * - Listing all users is denied to prevent unauthorized enumeration.
 * - The 'testReports' collection group is used to efficiently query all reports for administrative purposes.
 *
 * Denormalization for Authorization:
 * - The `TestReport` entity has an `enteredBy` field that must match the `userId` in the path.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document, based on the userId.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the existing document.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description
     * Security rules for the `/users/{userId}` collection.
     * This collection stores user profile information, with the document ID matching the Firebase Auth UID.
     *
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their own profile.
     *  Request: { auth: { uid: 'user123' }, method: 'create', path: '/databases/(default)/documents/users/user123', data: { id: 'user123', email: 'test@example.com', role: 'Data Entry User' } }
     * @allow (get) User with UID 'user456' can get their own profile.
     *  Request: { auth: { uid: 'user456' }, method: 'get', path: '/databases/(default)/documents/users/user456' }
     * @allow (update) User with UID 'user789' can update their own profile.
     *  Request: { auth: { uid: 'user789' }, method: 'update', path: '/databases/(default)/documents/users/user789', data: { id: 'user789', email: 'newemail@example.com', role: 'Admin' } }
     * @allow (delete) User with UID 'user012' can delete their own profile.
     *  Request: { auth: { uid: 'user012' }, method: 'delete', path: '/databases/(default)/documents/users/user012' }
     * @deny (create) User with UID 'user123' cannot create a profile with a mismatched ID.
     *  Request: { auth: { uid: 'user123' }, method: 'create', path: '/databases/(default)/documents/users/user456', data: { id: 'user456', email: 'test@example.com', role: 'Data Entry User' } }
     * @deny (list) Anyone cannot list all users.
     *  Request: { auth: { uid: 'user123' }, method: 'list', path: '/databases/(default)/documents/users' }
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description
     * Security rules for the `/users/{userId}/testReports/{testReportId}` collection.
     * This collection stores test reports created by the specified user.
     *
     * @path /users/{userId}/testReports/{testReportId}
     * @allow (create) User with UID 'user123' can create a test report under their profile, with `enteredBy` matching the UID.
     *  Request: { auth: { uid: 'user123' }, method: 'create', path: '/databases/(default)/documents/users/user123/testReports/report1', data: { enteredBy: 'user123', ... } }
     * @allow (get) User with UID 'user456' can get a test report under their profile.
     *  Request: { auth: { uid: 'user456' }, method: 'get', path: '/databases/(default)/documents/users/user456/testReports/report1' }
     * @allow (update) User with UID 'user789' can update a test report under their profile.
     *  Request: { auth: { uid: 'user789' }, method: 'update', path: '/databases/(default)/documents/users/user789/testReports/report1', data: { enteredBy: 'user789', ... } }
     * @allow (delete) User with UID 'user012' can delete a test report under their profile.
     *  Request: { auth: { uid: 'user012' }, method: 'delete', path: '/databases/(default)/documents/users/user012/testReports/report1' }
     * @deny (create) User with UID 'user123' cannot create a test report under their profile with a mismatched `enteredBy`.
     *  Request: { auth: { uid: 'user123' }, method: 'create', path: '/databases/(default)/documents/users/user123/testReports/report1', data: { enteredBy: 'user456', ... } }
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree, and validates relational integrity between documents.
     */
    match /users/{userId}/testReports/{testReportId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.enteredBy == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.enteredBy == userId;
      allow delete: if isExistingOwner(userId);
    }
  }
}