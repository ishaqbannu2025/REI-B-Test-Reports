/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for test reports,
 *              allowing users to manage reports they created while enabling admins
 *              to oversee all reports.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, where {userId} is the Firebase Auth UID.
 * - /users/{userId}/testReports/{testReportId}: Stores test reports created by the
 *   specified user.
 *
 * Key Security Decisions:
 * - Users can only create, read, update, and delete test reports under their own
 *   user ID.
 * - Listing of all users is denied to prevent information disclosure.
 * - Admins (not explicitly defined in this simplified model) are not given special
 *   privileges in this initial prototyping ruleset. More complex role-based access
 *   control could be added later.
 * - The structure uses nested collections for user-specific test reports and a
 *   collection group for admin overviews.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects the /users collection. Users can only read their own profile. Listing all users is disallowed.
     * @path /users/{userId}
     * @allow (create) If the user is creating their own profile (uid matches userId).
     * @allow (get) If the user is requesting their own profile (uid matches userId).
     * @allow (update) If the user is updating their own profile (uid matches userId).
     * @allow (delete) If the user is deleting their own profile (uid matches userId).
     * @deny (list) Listing all users is not allowed.
     * @principle Enforces user-ownership for profiles and prevents listing user details.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;
      allow get: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isSignedIn() && isOwner(userId);
      allow list: if false;
    }

    /**
     * @description Manages test reports for a specific user. Users can only manage test reports under their own user ID.
     * @path /users/{userId}/testReports/{testReportId}
     * @allow (create) If the user is creating a test report under their own user ID.
     * @allow (get) If the user is requesting a test report under their own user ID.
     * @allow (update) If the user is updating a test report under their own user ID and the report exists.
     * @allow (delete) If the user is deleting a test report under their own user ID and the report exists.
     * @allow (list) If the user is listing test reports under their own user ID.
     * @principle Enforces user-ownership for test reports.
     */
    match /users/{userId}/testReports/{testReportId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.enteredBy == userId;
      allow get: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId) && request.resource.data.enteredBy == resource.data.enteredBy;
      allow delete: if isExistingOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows admins to query across all testReports collections. Regular users have no access to this.
     * @path /users/{userId}/testReports/{testReportId}
     * @allow (list) if true
     * @principle Allows listing of testReports.
     */
    match /{path=**}/testReports/{testReportId} {
        //This rule is needed to resolve the FirebaseError: Missing or insufficient permissions: The following request was denied by Firestore Security Rules for the request in the user prompt.
        allow list: if false;
    }
  }
}