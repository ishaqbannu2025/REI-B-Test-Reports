/**
 * @file Firestore Security Rules
 * @core_philosophy This ruleset enforces a user-ownership model for test reports,
 *                  where users can only access test reports they created, except
 *                  for admins who can access all reports.
 * @data_structure Data is nested under `/users/{userId}/testReports/{testReportId}`.
 *                 User profiles are stored in `/users/{userId}`.
 * @key_security_decisions
 *   - Users can only create, read, update, and delete test reports under their own user ID.
 *   - Admins (defined by a role in the `/users/{userId}` document) can read all test reports using a collection group query.
 *   - Listing all users is disallowed for security reasons.
 * @denormalization_for_authorization The `enteredBy` field in the `TestReport` document is used to
 *                                    denormalize the user ID, allowing for efficient ownership checks.
 * @structural_segregation Private user data is stored under `/users/{userId}`.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document, based on the provided user ID.
     * @param {string} userId The user ID to compare against the authenticated user's UID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an existing owner of the document.
     * @param {string} userId The user ID to compare against the authenticated user's UID.
     * @return {boolean} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Gets the user role from the /users/{userId} document.
     * @param {string} userId The user ID to check.
     * @return {string} The role of the user, or null if the document doesn't exist or the role is not defined.
     */
    function getUserRole(userId) {
        return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }

    /**
     * @description Checks if the user has the 'Admin' role.
     * @return {boolean} True if the user has the 'Admin' role, false otherwise.
     */
    function isAdmin() {
        return isSignedIn() && getUserRole(request.auth.uid) == 'Admin';
    }
    
    /**
     * @description Rules for the /users/{userId} document.
     * @path /users/{userId}
     * @allow (create) If the user is creating their own user document (matching UID).
     * @allow (get) If the user is requesting their own user document (matching UID).
     * @allow (update) If the user is updating their own user document (matching UID).
     * @allow (delete) If the user is deleting their own user document (matching UID).
     * @deny (create) If the user ID in the path does not match the authenticated user's UID.
     * @deny (get) If the user is not authenticated or not the owner.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow get: if isOwner(userId);
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
      allow list: if false;
    }

    /**
     * @description Rules for the /users/{userId}/testReports/{testReportId} document.
     * @path /users/{userId}/testReports/{testReportId}
     * @allow (create) If the user is creating a test report under their own user ID.
     * @allow (get) If the user is requesting a test report under their own user ID.
     * @allow (update) If the user is updating a test report under their own user ID.
     * @allow (delete) If the user is deleting a test report under their own user ID.
     * @deny (create) If the user ID in the path does not match the authenticated user's UID.
     * @deny (get) If the user is not authenticated or not the owner.
     * @principle Enforces document ownership for test reports, only the creator can modify them.
     */
    match /users/{userId}/testReports/{testReportId} {
      allow create: if isOwner(userId) && request.resource.data.enteredBy == userId;
      allow get: if isOwner(userId);
      allow update: if isExistingOwner(userId) && request.resource.data.enteredBy == resource.data.enteredBy;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the 'testReports' collection group.
     * @path /users/{userId}/testReports/{testReportId} (via collection group)
     * @allow (list) If the user has the 'Admin' role.
     * @deny (list) If the user is not an admin.
     * @principle Allows admins to list all test reports for reporting and management purposes.
     */
    match /{path=**}/testReports/{document} {
        allow list: if isAdmin();
        allow get: if false;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }
  }
}