/**
 * @file Overview
 * This ruleset enforces a user-ownership model for test reports, where users can only manage reports they have created,
 * with the exception of admins who can view all reports.
 *
 * @data-structure
 * - /users/{userId}: Stores user profile information. 'userId' must match the Firebase Auth UID.
 * - /users/{userId}/testReports/{testReportId}: Stores test reports created by a specific user.
 *
 * @key-security-decisions
 * - Users can only list reports within their own user subcollection.
 * - Admins have read-only access to all test reports via collection group queries.
 * - Listing the `/users` collection is denied to prevent unauthorized access to user data.
 * - All write operations require a valid, authenticated user.
 *
 * @denormalization-authorization
 * - The `TestReport` entity includes an `enteredBy` field that must match the `userId` in the path.
 *   This denormalization allows for efficient ownership checks without requiring additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Prevents listing of all user documents.
     * @path /databases/{database}/documents/users
     * @allow None - Listing all users is not permitted.
     * @deny (list) Any user attempting to list all users.
     * @principle Prevents unauthorized access to user data.
     */
    match /users {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to individual user documents.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (get) Any signed-in user can get their profile.
     * @allow (create) A signed-in user can create their own profile if the UID matches the document ID.
     * @allow (update) A signed-in user can update their own profile.
     * @allow (delete) A signed-in user can delete their own profile.
     * @deny (create) A user attempting to create a profile with a mismatched UID.
     * @deny (update) A user attempting to update another user's profile.
     * @deny (delete) A user attempting to delete another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to test reports for a specific user.
     * @path /databases/{database}/documents/users/{userId}/testReports/{testReportId}
     * @allow (get) The owner of the test report can retrieve it.
     * @allow (list) The owner of the test reports can list them.
     * @allow (create) The owner can create a test report.
     * @allow (update) The owner can update their own test report.
     * @allow (delete) The owner can delete their own test report.
     * @deny (create) A user attempting to create a test report for another user.
     * @deny (update) A user attempting to update a test report they don't own.
     * @deny (delete) A user attempting to delete a test report they don't own.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/testReports/{testReportId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.enteredBy == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.enteredBy == resource.data.enteredBy;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows admins to read all test reports.
     * @path /databases/{database}/documents/users/{userId}/testReports/{testReportId}
     * @allow (list) Admins can read all test reports.
     * @deny (list) Non-admins cannot read all test reports.
     * @principle Allows admins read access to all reports for auditing and management.
     */
    match /{path=**}/testReports/{testReportId} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}