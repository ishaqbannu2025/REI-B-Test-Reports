/**
 * @fileoverview Firestore Security Rules for the electrical test reports application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for test reports, with administrative override capabilities. Users can only manage the test reports they create, while administrators can access and manage all reports. Public read access is NOT supported.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data. 'userId' must match the Firebase Auth UID.
 * - /users/{userId}/testReports/{testReportId}: Stores test reports created by a specific user. This uses a collection group named `testReports`.
 *
 * Key Security Decisions:
 * - Users can only create, update, or delete test reports they own.
 * - Administrators have read-only access to all test reports via the `testReports` collection group. Write operations are not supported at the root collection level.
 * - Listing all users is disallowed to protect user privacy.
 * - The `testReports` collection group provides a way for administrators to view all reports across different users.
 *
 * Denormalization for Authorization:
 * - TestReport documents have an `enteredBy` field that MUST match the `userId` in the path. This enables efficient ownership checks without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and manage their own user profiles.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if the user's UID matches the 'userId' in the path.
     * @deny (get, create, update, delete) if the user is not authenticated or the UID does not match the 'userId'.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Listing users is disallowed.
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows users to manage their own test reports within their user subcollection.
     * @path /users/{userId}/testReports/{testReportId}
     * @allow (get, list, create, update, delete) if the user's UID matches the 'userId' in the path.
     * @deny (get, list, create, update, delete) if the user is not authenticated or the UID does not match the 'userId'.
     * @principle Enforces document ownership for test reports.
     */
    match /users/{userId}/testReports/{testReportId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.enteredBy == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.enteredBy == resource.data.enteredBy;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows administrators to read all test reports via a collection group query.
     * @path /testReports/{testReportId}
     * @allow (list) if the user is an administrator.
     * @deny (get, create, update, delete) Always deny these operations at the collection group level to ensure proper data isolation.
     * @principle Provides read-only access to all test reports for administrators.
     */
    match /testReports/{testReportId} {
       // CRITICAL: There is no role-based authentication implemented at the moment. For the prototype, we are granting `list` permission for all users.
      allow get: if false;
      allow list: if true; // TODO: Implement role-based authentication for administrators.
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}