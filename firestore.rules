/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a user-ownership model for test reports.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, where {userId} matches the Firebase Auth UID.
 * - /users/{userId}/testReports/{reportId}: Stores individual test reports created by the user.
 *
 * Key Security Decisions:
 * - Users can only read and write their own test reports.
 * - Listing of all users is disallowed.
 * - Collection group 'testReports' is used for admin views, but access is not yet implemented.
 *
 * Denormalization for Authorization:
 * - Each testReport document will contain an 'enteredBy' field, which must match the userId of the user who created it.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own user profile.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their profile.
     * @deny (create) - User with UID 'user123' cannot create a profile with a different UID ('user456').
     * @allow (get, update, delete) - User with UID 'user123' can read, update, and delete their own profile.
     * @deny (get, update, delete) - User with UID 'user123' cannot read, update, or delete the profile of another user ('user456').
     * @principle Enforces document ownership for writes and restricts access to a user's own data.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.uid == userId;
      allow delete: if isSignedIn() && isExistingOwner(userId) && resource.data.uid == userId;
    }

    /**
     * @description Allows users to manage their own test reports.
     * @path /users/{userId}/testReports/{reportId}
     * @allow (create) - User with UID 'user123' can create a test report in their own directory.
     * @deny (create) - User with UID 'user123' cannot create a test report in another user's directory ('user456').
     * @allow (get, update, delete) - User with UID 'user123' can read, update, and delete their own test reports.
     * @deny (get, update, delete) - User with UID 'user123' cannot read, update, or delete test reports of another user ('user456').
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/testReports/{reportId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.enteredBy == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.enteredBy == userId;
      allow delete: if isSignedIn() && isExistingOwner(userId) && resource.data.enteredBy == userId;
    }

    /**
     * @description Allows admin to query all test reports in the 'testReports' collection group.
     * @path N/A (Collection Group)
     * @allow (list) - Admin can list all test reports.
     * @deny (list) - Non-admin cannot list all test reports.
     * @principle Requires custom claim 'role' to be 'Admin'.
     */
    match /{path=**}/testReports/{reportId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}