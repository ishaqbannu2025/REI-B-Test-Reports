/**
 * @fileoverview Firestore Security Rules for the electrical test reports application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for test reports, with an exception for admins who can access all reports.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. 'userId' must match the Firebase Auth UID.
 * - /users/{userId}/testReports/{testReportId}: Stores test reports created by a specific user.
 *
 * Key Security Decisions:
 * - Users can only read/write their own profile data.
 * - Users can only create, read, update, and delete test reports under their own user ID.
 * - Admins have read-only access to all test reports using collection group queries. Admins cannot modify testReports.
 * - User listing is disallowed for privacy.
 *
 * Denormalization for Authorization:
 *  - The `enteredBy` field on the `TestReport` entity is used to enforce user-ownership.  It must match the `userId` in the path.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the authenticated user is the owner of the document.
     * @param {string} userId The user ID to check against.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user exists, using the resource variable.
     * @param {string} userId The user ID to check against.
     * @return {boolean} True if the user is the owner of the document and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && existsAfter(/databases/$(database)/documents/users/$(userId));
    }

    /**
     * @description Rule set for user profiles.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their profile document.
     * @allow (get) User with UID 'user123' can read their profile document.
     * @allow (update) User with UID 'user123' can update their profile document.
     * @allow (delete) User with UID 'user123' can delete their profile document.
     * @deny (create) User with UID 'user456' cannot create a profile document for 'user123'.
     * @deny (get) User with UID 'user456' cannot read profile document for 'user123'.
     * @deny (update) User with UID 'user456' cannot update profile document for 'user123'.
     * @deny (delete) User with UID 'user456' cannot delete profile document for 'user123'.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.auth.uid == userId;
      allow update: if isExistingOwner(userId) && request.auth.uid == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule set for test reports under a specific user.
     * @path /users/{userId}/testReports/{testReportId}
     * @allow (create) User with UID 'user123' can create a test report under their user ID.
     * @allow (get) User with UID 'user123' can read a test report under their user ID.
     * @allow (update) User with UID 'user123' can update a test report under their user ID.
     * @allow (delete) User with UID 'user123' can delete a test report under their user ID.
     * @deny (create) User with UID 'user456' cannot create a test report under 'user123'.
     * @deny (get) User with UID 'user456' cannot read a test report under 'user123'.
     * @deny (update) User with UID 'user456' cannot update a test report under 'user123'.
     * @deny (delete) User with UID 'user456' cannot delete a test report under 'user123'.
     * @principle Enforces document ownership for all operations on test reports.
     */
    match /users/{userId}/testReports/{testReportId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule set for the 'testReports' collection group.  Allows listing by admins.
     * @path /testReports
     * @allow (list) Admin can list all test reports.
     * @deny (create) No one can create in the root collection.
     * @deny (update) No one can update in the root collection.
     * @deny (delete) No one can delete in the root collection.
     * @principle Allows listing by admins by using collection groups.
     */
    match /{path=**}/testReports/{testReportId} {
        allow get: if false; // no one can get individual doc
        allow list: if false; // explicitly deny anonymous user from listing
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }
  }
}