/**
 * @fileoverview Firestore Security Rules for the electrical test reports application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for test reports, where users can only
 * manage reports they created.  Admins can list all reports through a collection group query.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. 'userId' must match the Firebase Auth UID.
 * - /users/{userId}/testReports/{testReportId}: Stores test reports created by the specified user.
 *
 * Key Security Decisions:
 * - Users can only create, update, or delete test reports they own.
 * - Admins can list all reports.
 * - Data validation is relaxed in this prototyping phase, focusing on ownership and relational integrity.
 *
 * Denormalization for Authorization:
 *  - The `TestReport` documents under `/users/{userId}/testReports/{testReportId}` have the `enteredBy` field which has to match the `userId`.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows access to user documents.
     * @path /users/{userId}
     * @allow (create) User with matching UID can create their own document.
     * @allow (get, update, delete) User with matching UID can access their own document.
     * @deny (create) User cannot create a document with a mismatched UID.
     * @deny (get, update, delete) User cannot access another user's document.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == userId;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Manages access to test reports within a user's subcollection.
     * @path /users/{userId}/testReports/{testReportId}
     * @allow (create) User can create a test report in their own subcollection. The `enteredBy` field must match the `userId`.
     * @allow (get, update, delete) User can access their own test reports.
     * @deny (create) User cannot create a test report with a mismatched `enteredBy` field.
     * @deny (update, delete) User cannot modify or delete another user's test reports.
     * @principle Enforces document ownership for test reports and validates relational integrity.
     */
    match /users/{userId}/testReports/{testReportId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.enteredBy == userId;
      allow update: if isOwner(userId) && resource.data.enteredBy == userId && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

     /**
      * @description Allows listing of all test reports via collection group query.  This assumes an "Admin" role
      *  is handled externally (e.g., via custom claims set by a trusted server).
      * @path testReports collection group
      * @allow (list) Admins can list all test reports.
      * @deny (get, create, update, delete) No direct document access via collection group.
      * @principle Allows admins to oversee all reports while maintaining user data isolation.
      */
    match /{path=**}/testReports/{testReportId} {
      function isAdmin() {
        return request.auth.token.role == "Admin";
      }
      allow get: if false;
      allow list: if isAdmin();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}