/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for test reports,
 *              where users can only manage their own reports, while also allowing
 *              Admins to view all reports.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, with 'userId' matching the Firebase Auth UID.
 * - /users/{userId}/testReports/{testReportId}: Stores test reports created by each user.
 *
 * Key Security Decisions:
 * - Users can only list test reports under their own user ID.
 * - Only authenticated users can create, update, or delete test reports, and they must own the reports.
 * - Admins are not explicitly defined in this ruleset, but collection group queries can be secured in the application code.
 *
 * Denormalization for Authorization:
 *  - The 'TestReport' documents will have an 'enteredBy' field that must match the 'userId' in the path. This avoids needing to query the User document to verify ownership.
 *
 * Structural Segregation:
 * - Private test reports are stored under the user's subcollection, ensuring only the user and admins can access them.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures the user profile document.
     * @path /users/{userId}
     * @allow (create) Authenticated user can create their own profile if the userId matches their auth.uid.
     * @allow (get) Authenticated user can get their own profile if the userId matches their auth.uid.
     * @allow (update) Authenticated user can update their own profile if the userId matches their auth.uid.
     * @allow (delete) Authenticated user can delete their own profile if the userId matches their auth.uid.
     * @deny (create) Anonymous user cannot create a profile.
     * @deny (get) User cannot read another user's profile.
     * @deny (update) User cannot modify another user's profile.
     * @deny (delete) User cannot delete another user's profile.
     * @principle Enforces document ownership for writes; restricts read/write access to a user's own data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isOwner(userId) && resource.data.uid == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures the testReports subcollection under a user.
     * @path /users/{userId}/testReports/{testReportId}
     * @allow (create) Authenticated user can create a report under their ID.
     * @allow (get) Authenticated user can get a report under their ID.
     * @allow (list) Authenticated user can list reports under their ID.
     * @allow (update) Authenticated user can update a report under their ID if they own it.
     * @allow (delete) Authenticated user can delete a report under their ID if they own it.
     * @deny (create) User cannot create a report under another user's ID.
     * @deny (get) User cannot read a report under another user's ID.
     * @deny (list) User cannot list reports under another user's ID.
     * @deny (update) User cannot modify a report under another user's ID.
     * @deny (delete) User cannot delete a report under another user's ID.
     * @principle Enforces document ownership for all operations within a user's data tree.
     */
    match /users/{userId}/testReports/{testReportId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.enteredBy == userId;
      allow update: if isOwner(userId) && resource.data.enteredBy == userId;
      allow delete: if isExistingOwner(userId);
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}