/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles and a public-read, owner-write model for test reports.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, accessible only to the user themselves.
 * - /users/{userId}/testReports/{reportId}: Stores test reports, accessible for reading by anyone but writable only by the report owner.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Test reports are publicly readable to facilitate easy verification.
 * - Test reports can only be created, updated, or deleted by the user who created them. The `enteredBy` field must match the authenticated user's ID.
 * - Listing of users is disallowed to prevent enumeration.
 *
 * Denormalization for Authorization:
 * - Test reports include an `enteredBy` field, which is a foreign key to the user's UID. This allows rules to quickly verify ownership without additional reads.
 *
 * Structural Segregation:
 * - Private user data and public test reports are stored in separate collections with different security profiles.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own profile data.
     * @path /users/{userId}
     * @allow (get, update, delete) User with UID 'user123' can read/update/delete their own profile at /users/user123.
     * @allow (create) User with UID 'user123' can create their own profile at /users/user123 if the document's uid matches the path.
     * @deny (get, update, delete) User with UID 'user456' cannot read/update/delete the profile of user 'user123' at /users/user123.
     * @deny (create) User with UID 'user123' cannot create a profile at /users/user456.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows public read access to test reports while restricting write access to the owner.
     * @path /users/{userId}/testReports/{reportId}
     * @allow (get, list) Any user can read any test report.
     * @allow (create) User with UID 'user123' can create a test report at /users/user123/testReports/report456 if request.resource.data.enteredBy == 'user123'.
     * @allow (update, delete) User with UID 'user123' can update/delete their test report at /users/user123/testReports/report456 if resource.data.enteredBy == 'user123'.
     * @deny (create) User with UID 'user456' cannot create a test report at /users/user123/testReports/report456.
     * @deny (update, delete) User with UID 'user456' cannot update/delete the test report of user 'user123' at /users/user123/testReports/report456.
     * @principle Enforces document ownership for writes while allowing public reads.
     */
    match /users/{userId}/testReports/{reportId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(enteredBy) {
        return request.auth.uid == enteredBy;
      }
        function isExistingOwner(enteredBy) {
        return isOwner(enteredBy) && resource != null;
      }

      allow get: if true;
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.enteredBy == request.auth.uid;
      allow update: if isSignedIn() && request.resource.data.enteredBy == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.enteredBy == request.auth.uid;
    }

    /**
     * @description Allows public read access to all test reports across all users in the 'testReports' collection group. Write operations are disallowed at the collection group level.
     * @path /databases/{database}/documents/{path=**}/testReports/{reportId}
     * @allow (get, list) Any user can read any test report in any 'testReports' collection.
     * @deny (create, update, delete) No user can create, update, or delete a test report directly within a collection group. These operations must occur within a specific user's testReports collection.
     * @principle Provides public read access to facilitate verification while maintaining owner-only write access.
     */
    match /{path=**}/testReports/{reportId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}