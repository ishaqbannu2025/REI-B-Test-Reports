rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own profile data.
     * @path /users/{userId}
     * @allow (create) User with matching UID can create their profile.
     * @allow (get, update, delete) Signed-in user with matching UID can read/update/delete their profile.
     * @deny (create) User cannot create a profile with a different UID.
     * @deny (get, update, delete) User cannot read/update/delete another user's profile.
     * @principle Enforces user-ownership for profile data.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && exists(resource);
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to test reports, but restricts write access to admins or the report creator.
     * @path /testReports/{reportId}
     * @allow (get, list) Any user can read or list test reports.
     * @allow (create) Signed-in user can create a test report. The 'enteredBy' field must match their UID.
     * @allow (update, delete) Only the report creator (enteredBy) or a user with the 'Admin' role can update or delete the report.
     * @deny (create) User cannot create a test report with an 'enteredBy' field that doesn't match their UID.
     * @deny (update, delete) User cannot update or delete a test report they didn't create and if they don't have the 'Admin' role.
     * @principle Allows public read with owner-only or admin-only writes.
     */
    match /testReports/{reportId} {
       function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(enteredBy) {
        return request.auth.uid == enteredBy;
      }

      function isAdmin() {
        return request.auth.token.role == 'Admin';
      }

     function canWriteTestReport(enteredBy) {
          return isSignedIn() && (isAdmin() || isOwner(enteredBy));
      }

      function isExistingOwner(enteredBy) {
          return isOwner(enteredBy) && exists(resource);
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.enteredBy == request.auth.uid;
      allow update: if canWriteTestReport(resource.data.enteredBy);
      allow delete: if canWriteTestReport(resource.data.enteredBy);
    }
  }
}