/**
 * @fileoverview Firestore Security Rules for the electrical test report application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and allows public read access to test reports.
 * Administrative privileges are not implemented in this prototype.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, with 'userId' matching the Firebase Auth UID.
 * - /testReports/{reportId}: Stores electrical test reports.
 *
 * Key Security Decisions:
 * - Users can only read/write their own profile data.
 * - Listing of users is disallowed.
 * - Test reports are publicly readable.
 * - Only authenticated users can create, update, or delete test reports.
 * - The `enteredBy` field in `testReports` must match the authenticated user's UID upon creation.
 *
 * Denormalization for Authorization:
 * The `TestReport` entity includes the `enteredBy` field, which is used to determine ownership. This avoids the need for separate queries to authorize write operations.
 *
 * Structural Segregation:
 * Public and private test report data is not segregated, but access to create/update/delete test reports is strictly limited to authenticated users.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

     /**
      * @description Checks if the authenticated user is the owner of an existing document.
      */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) User with matching UID can create their profile.
     * @allow (get, update, delete) User with matching UID can access and modify their profile.
     * @deny (create) User cannot create a profile with a mismatched UID.
     * @deny (list) Listing users is not permitted.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for test reports. Publicly readable, but only authenticated users can create/modify.
     * @path /testReports/{reportId}
     * @allow (get, list) Any user can read test reports.
     * @allow (create) Authenticated users can create test reports, with `enteredBy` matching their UID.
     * @allow (update, delete) Only the user who created the report (`enteredBy`) can update/delete it.
     * @deny (create) Unauthenticated users cannot create test reports.
     * @deny (update, delete) Unauthenticated users cannot update/delete test reports.
     * @principle Allows public read access with owner-only writes, enforcing ownership through the `enteredBy` field.
     */
    match /testReports/{reportId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.enteredBy == request.auth.uid;
      allow update: if isSignedIn() && resource.data.enteredBy == request.auth.uid && resource != null;
      allow delete: if isSignedIn() && resource.data.enteredBy == request.auth.uid && resource != null;
    }
  }
}