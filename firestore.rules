/**
 * @fileoverview Firestore Security Rules for Electrical Test Reports App
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control model, with a separation between regular data entry users and administrative users.
 * User data is stored in a private collection, accessible only to the user themselves. Test reports can be listed by admins.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, where {userId} matches the Firebase Auth UID.
 * - /testReports/{reportId}: Stores all test reports, regardless of the creating user. Accessible to admins for listing. Each report contains `enteredBy` to indicate ownership.
 *
 * Key Security Decisions:
 * - Only admins can list all test reports.
 * - Data entry users cannot list all test reports.
 * - Users can only create, update, or delete their own test reports, validated through the `enteredBy` field.
 * - No public listing of user profiles.
 *
 * Denormalization for Authorization:
 * - Each TestReport document denormalizes the `enteredBy` field, which is the UID of the user who created it. This enables owner-based access control without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description: Allows users to read and write their own profile data.
     * @path: /users/{userId}
     * @allow: (get, create, update, delete) if the authenticated user's UID matches the {userId}.
     * @deny: (get, create, update, delete) if the authenticated user's UID does not match the {userId}.
     * @principle: Enforces user-ownership for profile data.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description: Allows listing test reports for admins, and creating, updating, or deleting test reports for the report owner.
     * @path: /testReports/{reportId}
     * @allow: (list) if the user is an admin. (create, update, delete) if the user is the owner of the test report.
     * @deny: (list) if the user is not an admin. (create, update, delete) if the user is not the owner of the test report.
     * @principle: Enforces admin-only listing and owner-only writes for test reports.
     */
    match /testReports/{reportId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(enteredBy) {
          return isSignedIn() && request.auth.uid == enteredBy;
      }

      function isAdmin() {
        return isSignedIn() && request.auth.token.email == 'admin@example.gov';
      }
      
      allow get: if isSignedIn();
      allow list: if isAdmin();
      allow create: if isSignedIn() && request.resource.data.enteredBy == request.auth.uid;
      allow update: if isSignedIn() && isOwner(resource.data.enteredBy) && resource != null;
      allow delete: if isSignedIn() && isOwner(resource.data.enteredBy) && resource != null;
    }
  }
}