/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a user-ownership model for test reports,
 *  where users can only manage their own reports, while admins have read-only access to all reports.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, with 'userId' matching the Firebase Auth UID.
 * - /users/{userId}/testReports/{testReportId}: Stores test reports created by the specified user.
 *
 * Key Security Decisions:
 * - Only the authenticated user can create their user document.
 * - Users can only read, update, or delete test reports they own.
 * - Admin users can list all test reports via collection group query but cannot modify them.
 * - Data validation is relaxed during this prototyping phase, focusing on authorization.
 * - List operations on testReports are restricted to admins or the owner.
 *
 * Denormalization for Authorization:
 * - Each TestReport document contains an 'enteredBy' field, which stores the user ID of the report creator. This allows for efficient owner checks without additional database reads.
 *
 * Structural Segregation:
 * - Private user data (user profiles and test reports) is stored under the `/users/{userId}` path, ensuring data isolation.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the document.
     * @param {string} userId - The user ID to check against.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing document.
     * @param {string} userId - The user ID to check against.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Defines the path for user documents.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their own profile.
     * @deny (create) - Non-authenticated user attempts to create a user profile.
     * @deny (update) - User attempts to update another user's profile.
     * @principle Enforces user ownership and self-creation for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // prevent listing all users
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if false;
    }

    /**
     * @description Defines the path for test reports within a user's subcollection.
     * @path /users/{userId}/testReports/{testReportId}
     * @allow (create) - User creates a test report in their own subcollection.
     * @deny (create) - User attempts to create a test report in another user's subcollection.
     * @allow (update) - User updates a test report in their own subcollection.
     * @deny (update) - User attempts to update a test report in another user's subcollection.
     * @allow (delete) - User deletes a test report in their own subcollection.
     * @deny (delete) - User attempts to delete a test report in another user's subcollection.
     * @principle Enforces user ownership for test reports.
     */
    match /users/{userId}/testReports/{testReportId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.enteredBy == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines the collection group for all test reports.
     * @path /testReports collection group
     * @allow (list) - Admin user lists all test reports.
     * @deny (list) - Non-admin user attempts to list all test reports.
     * @principle Restricts collection group access to admins.
     */
    match /{path=**}/testReports/{testReportId} {
        allow get: if false; // Collection group queries do not support get
        allow list: if isSignedIn();
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }
  }
}