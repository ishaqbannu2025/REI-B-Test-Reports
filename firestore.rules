/**
 * @fileoverview Firestore Security Rules for the electrical test reports application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for test reports, where users can only manage reports they created.
 * Admins have read access to all test reports, but cannot modify them directly through these rules (admin actions should be handled via trusted backend).
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data, with 'userId' matching the Firebase Auth UID.
 * - /users/{userId}/testReports/{testReportId}: Stores test reports created by each user.
 *
 * Key Security Decisions:
 * - User listing is disallowed for privacy.
 * - The 'testReports' collection group allows admins to efficiently query all reports across all users for auditing and reporting.
 *
 * Denormalization for Authorization:
 * - Each TestReport has an 'enteredBy' field which must match the UID of the user creating it. This is validated on creation and enforced as immutable on updates.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by a signed-in user.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     * @param {string} userId - The user ID to compare against the authenticated user's UID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is an existing owner of the document.
     * @param {string} userId - The user ID to compare against the authenticated user's UID and the resource ID.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Defines the Admin role.
     * For simplicity in this Prototyping Phase, all logged in users are effectively admins.
     * In a Production deployment, this function must use custom claims to identify actual admins.
     * @returns {boolean} - Whether the user has the 'Admin' role.
     */
    function isAdmin() {
        return isSignedIn(); // In production, check for custom claims here.
    }

    /**
     * @description Security rules for user profiles.
     * @path /users/{userId}
     * @allow (create) - If the user is creating their own profile (userId matches auth.uid).
     * @allow (get, update, delete) - If the user is the owner of the profile.
     * @deny (list) - User listing is not allowed.
     * @principle Enforces user-ownership for profile data and prevents unauthorized access.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for test reports within a user's subcollection.
     * @path /users/{userId}/testReports/{testReportId}
     * @allow (create) - If the user is creating a new report in their own subcollection and the 'enteredBy' field matches their UID.
     * @allow (get, list, update, delete) - If the user is the owner of the report (created it).
     * @principle Enforces user-ownership for test reports and validates the 'enteredBy' field on creation.
     */
    match /users/{userId}/testReports/{testReportId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.enteredBy == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.enteredBy == resource.data.enteredBy; // Prevent changes to enteredBy
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for accessing all testReports using collection group query.
     * @path /testReports
     * @allow (list) - If the user is an admin.
     * @deny (get, create, update, delete) - Only listing is allowed via collection group query.
     * @principle Allows admins to view all test reports for auditing and reporting.
     */
    match /{path=**}/testReports/{testReportId} {
        allow list: if isAdmin();
        allow get, create, update, delete: if false;
    }
  }
}