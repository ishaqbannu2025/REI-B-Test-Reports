/**
 * @file Firebase Security Rules for Electrical Test Reports
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model for test reports created under user accounts,
 *                  while also granting global read access to the 'testReports' collection group for any user.
 *                  User profiles are private, accessible only to the owning user.
 *
 * @data_structure
 *  - /users/{userId}: Stores user profiles. 'userId' MUST match the Firebase Auth UID.
 *  - /users/{userId}/testReports/{testReportId}: Stores test reports created by the user.
 *  - /testReports: Represents the 'testReports' collection group for admin queries across all users.
 *
 * @key_security_decisions
 *  - Users can only read and write their own profile data.
 *  - Users can only create, update, or delete test reports under their own user ID.
 *  - The testReports collection group allows for listing all reports across all users; individual reports are secured by owner-only write access.
 *
 * @denormalization_for_authorization N/A
 *
 * @structural_segregation User profiles and their test reports are stored under the /users/{userId} path,
 *                        ensuring data privacy and ownership. The testReports collection group provides a top-level
 *                        view for administrative purposes but does not compromise the ownership of individual reports.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user profile documents.
     * @path /users/{userId}
     * @allow (get, update, delete) User with matching {userId} can access.
     * @allow (create) User with matching {userId} can create their profile.
     * @deny (get, update, delete) Any other user cannot access.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isOwner(userId) && resource.data.uid == userId;
      allow delete: if isOwner(userId) && resource.data.uid == userId;
    }

    /**
     * @description Grants access to test reports nested under a specific user.
     * @path /users/{userId}/testReports/{testReportId}
     * @allow (create) User with matching {userId} can create test reports under their profile.
     * @allow (get, update, delete) User with matching {userId} can access/modify their own test reports.
     * @deny (create, get, update, delete) Any other user cannot access.
     * @principle Enforces document ownership for test reports within user profiles.
     */
    match /users/{userId}/testReports/{testReportId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.enteredBy == userId;
      allow update: if isExistingOwner(userId) && resource.data.enteredBy == request.resource.data.enteredBy;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants read access to the 'testReports' collection group for all users.
     *              Write access is denied to enforce owner-only writes via /users/{userId}/testReports/{testReportId}.
     * @path /testReports
     * @allow (get, list) Any user can read all test reports.
     * @deny (create, update, delete) No user can create, update, or delete directly in this collection group.
     * @principle Allows global read access to test reports while enforcing ownership for writes.
     */
    match /testReports/{testReportId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}