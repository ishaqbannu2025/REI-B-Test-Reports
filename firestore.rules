/**
 * @fileoverview Firestore Security Rules for Electrical Test Reports App.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for test reports nested under user documents.
 * Users can only access and manage test reports they create. The rules provide access based on the user's UID, ensuring data privacy.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data, with 'userId' matching the Firebase Auth UID.
 * - /users/{userId}/testReports/{testReportId}: Stores test reports created by the specified user.
 *
 * Key Security Decisions:
 * - Strict User Ownership: Users can only read and write data within their own /users/{userId} path.
 * - Collection Group Query: Admins can query all testReports.
 * - No User Listing: Listing all users is not permitted.
 *
 * Denormalization for Authorization:
 * - The `enteredBy` field in `TestReport` is used to enforce ownership of the test report.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user ID matches the authenticated user's UID.
     * @param {string} userId - The user ID to check.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the existing owner of the document.
     * @param {string} userId - The user ID to check.
     * @return {boolean} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user is creating a document with the correct owner ID.
     * @param {string} userId - The user ID to check against.
     * @return {boolean} True if the user is creating a document with the correct owner ID, false otherwise.
     */
    function creatingOwnDocument(userId) {
        return isSignedIn() && request.resource.data.uid == userId;
    }

    /**
     * @description Checks if the user is updating their own document, ensuring immutability of the uid field.
     * @param {string} userId - The user ID to check against.
     * @return {boolean} True if the user is updating their own document and the uid field is unchanged, false otherwise.
     */
    function updatingOwnDocument(userId) {
        return isSignedIn() && request.auth.uid == userId && request.resource.data.uid == resource.data.uid;
    }

    /**
     * @description Rules for /users/{userId} documents.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (create) Signed-in user creates their own user document.
     * @deny (create) User attempts to create a document with a different userId.
     * @allow (get) Signed-in user gets their own user document.
     * @deny (get) User attempts to get another user's document.
     * @allow (update) Signed-in user updates their own user document.
     * @deny (update) User attempts to update another user's document.
     * @allow (delete) Signed-in user deletes their own user document.
     * @deny (delete) User attempts to delete another user's document.
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId} {
      allow create: if creatingOwnDocument(userId);
      allow get: if isOwner(userId);
      allow update: if updatingOwnDocument(userId);
      allow delete: if isExistingOwner(userId);
      allow list: if false;
    }

    /**
     * @description Rules for /users/{userId}/testReports/{testReportId} documents.
     * @path /databases/{database}/documents/users/{userId}/testReports/{testReportId}
     * @allow (create) Signed-in user creates a testReport under their user document.
     * @deny (create) User attempts to create a testReport under another user's document.
     * @allow (get) Signed-in user gets their own testReport.
     * @deny (get) User attempts to get another user's testReport.
     * @allow (update) Signed-in user updates their own testReport.
     * @deny (update) User attempts to update another user's testReport.
     * @allow (delete) Signed-in user deletes their own testReport.
     * @deny (delete) User attempts to delete another user's testReport.
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId}/testReports/{testReportId} {
      allow create: if isOwner(userId) && request.resource.data.enteredBy == request.auth.uid;
      allow get: if isOwner(userId);
      allow update: if isExistingOwner(userId) && resource.data.enteredBy == request.auth.uid;
      allow delete: if isExistingOwner(userId) && resource.data.enteredBy == request.auth.uid;
      allow list: if isOwner(userId);
    }
  }
}