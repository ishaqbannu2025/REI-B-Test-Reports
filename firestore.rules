/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a user-ownership model for test reports, with administrative read access to all reports.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /users/{userId}/testReports/{reportId}: Stores test reports created by a specific user.
 * - /testReports: Collection group allows admin queries across all test reports.
 *
 * Key Security Decisions:
 * - Users can only create, read, update, and delete their own test reports.
 * - Admins can read all test reports (via the `testReports` collection group).
 * - Users cannot list all users (no global `users` collection listing).
 *
 * Denormalization for Authorization:
 * - Each TestReport document contains an 'enteredBy' field that stores the user's UID, allowing ownership checks without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and manage their own profile data.
     * @path /users/{userId}
     * @allow (get, update, delete) User with matching UID can access their own profile.
     * @allow (create) User can create their own profile if the UID matches.
     * @deny (get, update, delete) User cannot access another user's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows a user to manage their own test reports.
     * @path /users/{userId}/testReports/{reportId}
     * @allow (create) User can create a test report under their own user ID.
     * @allow (get, update, delete) User with matching UID can access their own test reports.
     * @deny (create, get, update, delete) User cannot access another user's test reports.
     * @principle Enforces document ownership for test reports.
     */
    match /users/{userId}/testReports/{reportId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.enteredBy == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(userId) && resource.data.enteredBy == request.resource.data.enteredBy;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

     /**
      * @description Allows admins to read all test reports (collection group query).
      * @path /testReports
      * @allow (list) Admin user can list all reports.
      * @deny (get, create, update, delete) Non-admin users cannot access this path.
      * @principle Allows administrative oversight while enforcing user ownership for modifications.
      */
    match /testReports {
        function isSignedIn() {
            return request.auth != null;
        }

        // TODO: Add admin role check here. For now, only signed-in users can list testReports.
        allow list: if isSignedIn();
        allow get: if false;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }
  }
}