/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for test reports,
 *              allowing users to manage only their own reports while granting
 *              unrestricted read access to admins.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data. 'userId' must match the Firebase Auth UID.
 * - /users/{userId}/testReports/{testReportId}: Stores test reports created by each user.
 *
 * Key Security Decisions:
 * - Users can only create, read, update, and delete test reports under their own user ID.
 * - Admins can list all testReports via collectionGroup.
 * - Schema validation is relaxed in this prototype phase, focusing on authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     * @param {string} userId - The user ID to compare against the authenticated user's UID.
     * @return {bool} True if the user is signed in and their UID matches the provided userId, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the existing owner of the resource.
     * @param {string} userId - The user ID to compare against the authenticated user's UID.
     * @return {bool} True if the user is signed in, their UID matches the provided userId, and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Defines security rules for user profiles.
     * @path /users/{userId}
     * @allow (create) Signed-in user with UID 'user123' can create a profile at /users/user123.
     * @deny (create) Signed-in user with UID 'user123' cannot create a profile at /users/user456.
     * @allow (get, update, delete) Signed-in user with UID 'user123' can read, update, and delete their own profile at /users/user123.
     * @deny (get, update, delete) Signed-in user with UID 'user123' cannot read, update, or delete the profile of another user at /users/user456.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow get: if isOwner(userId);
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
      allow list: if false;
    }

    /**
     * @description Defines security rules for test reports under a user's profile.
     * @path /users/{userId}/testReports/{testReportId}
     * @allow (create) Signed-in user with UID 'user123' can create a test report at /users/user123/testReports/report456.
     * @deny (create) Signed-in user with UID 'user123' cannot create a test report at /users/user456/testReports/report456.
     * @allow (get, update, delete) Signed-in user with UID 'user123' can read, update, and delete their own test report at /users/user123/testReports/report456.
     * @deny (get, update, delete) Signed-in user with UID 'user123' cannot read, update, or delete the test report of another user at /users/user456/testReports/report456.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/testReports/{testReportId} {
      allow create: if isOwner(userId) && request.resource.data.enteredBy == userId;
      allow get: if isOwner(userId);
      allow update: if isExistingOwner(userId) && request.resource.data.enteredBy == resource.data.enteredBy;
      allow delete: if isExistingOwner(userId);
      allow list: if isOwner(userId);
    }

    /**
     * @description Allows listing all testReports via collectionGroup query to Admins
     * @path /testReports collection group
     * @allow (list) Signed-in admin can list all test reports.
     * @deny (list) Non-signed-in user cannot list test reports.
     *
     */
    match /{path=**}/testReports/{testReportId} {
      allow list: if isSignedIn();
      allow get: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}