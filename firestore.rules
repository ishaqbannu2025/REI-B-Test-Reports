/**
 * @description This ruleset enforces a user-ownership model for test reports, with public read access to a limited subset of report data.
 * All data is nested under /users/{userId} for private data and available at the top level for public verification.
 *
 * @dataStructure
 * - /users/{userId}: Stores user profile information.
 * - /users/{userId}/testReports/{reportId}: Stores complete test reports, accessible only by the owner.
 * - /testReports/{reportId}: Publicly accessible, read-only collection containing a subset of test report data.
 *
 * @keySecurityDecisions
 * - Users can only create, update, or delete test reports they own.
 * - Listing of test reports is restricted to the owner.
 * - A separate top-level `testReports` collection is used for public read access to a limited data set.
 * - The public `testReports` collection does NOT contain personal or sensitive information.
 * - Only authenticated users can access test reports.
 *
 * @denormalizationForAuthorization
 * The `TestReport` entity has an `enteredBy` field to associate the report with the user who created it.
 * This is used to verify ownership when creating, updating, or deleting reports.
 *
 * @structuralSegregation
 * Private test reports are stored under `/users/{userId}/testReports/{reportId}`, while a public subset of each report is stored in the top-level `/testReports/{reportId}` collection.
 * This allows public read access without exposing sensitive information.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user is the owner of the document, based on the provided userId.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the current user is the owner of the existing document.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }


    /**
     * @description Grants access to user profile information for the owner only.
     * @path /users/{userId}
     * @allow (get, create, update, delete, list) if the user is the owner.
     * @deny (get, list) if the user is not signed in.
     * @deny (create, update, delete) if the user is not the owner.
     * @principle Enforces document ownership.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Prevent listing all users
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants access to test reports for the owner only.
     * @path /users/{userId}/testReports/{reportId}
     * @allow (get, create, update, delete, list) if the user is the owner.
     * @deny (get, list) if the user is not signed in.
     * @deny (create, update, delete) if the user is not the owner.
     * @principle Enforces document ownership.
     */
    match /users/{userId}/testReports/{reportId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.enteredBy == request.auth.uid;
      allow update: if isExistingOwner(userId) && resource.data.enteredBy == request.resource.data.enteredBy;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants public read access to a subset of test report data.
     * @path /testReports/{reportId}
     * @allow (get, list) if true.
     * @deny (create, update, delete) if false.
     * @principle Provides public read access to non-sensitive data.
     */
    match /testReports/{reportId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}