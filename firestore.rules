/**
 * @fileoverview Firestore Security Rules for Electrical Test Reports
 *
 * Core Philosophy:
 * This ruleset enforces a multi-tenant data model where users have ownership over their test reports,
 * with admin users having broader access.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. 'userId' must match the Firebase Auth UID.
 * - /users/{userId}/testReports/{testReportId}: Stores test reports created by each user.
 * - /testReports: Root level collection of all test reports, meant for admin access.
 *
 * Key Security Decisions:
 * - Users can only create, read, update, and delete test reports under their own user ID.
 * - Admins, as identified by their role in the /users/{userId} document, can read all test reports.
 * - Public listing of test reports is disallowed to prevent unauthorized data access.
 *
 * Denormalization for Authorization:
 * - The 'enteredBy' field within each TestReport document is used to track ownership.  This is
 *   validated on creation to match the user's UID, and immutability is enforced on updates.
 *
 * Structural Segregation:
 * - Using user subcollections (/users/{userId}/testReports) for user-owned data and a top-level
 *   collection (testReports) for admin access allows for efficient and secure data retrieval.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     * @param {string} userId - The user ID to compare against.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is an existing owner of the document.
     * @param {string} userId - The user ID to compare against.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the authenticated user is an admin.
     * @return {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Admin';
    }

    /**
     * @description Rules for user profile documents.
     * @path /users/{userId}
     * @allow (create) - If the user's UID matches the userId.
     * @deny (create) - If the user's UID does not match the userId.
     * @allow (get, update, delete) - If the user's UID matches the userId.
     * @deny (get, update, delete) - If the user's UID does not match the userId.
     * @principle Enforces document ownership and prevents unauthorized access to user profiles.
     */
    match /users/{userId} {
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;
      allow get, update, delete: if isSignedIn() && isExistingOwner(userId);
      allow list: if false;
    }

    /**
     * @description Rules for test reports within a user's subcollection.
     * @path /users/{userId}/testReports/{testReportId}
     * @allow (create) - If the user's UID matches the userId and enteredBy matches the userId.
     * @deny (create) - If the user's UID does not match the userId or enteredBy does not match the userId.
     * @allow (get, update, delete) - If the user's UID matches the userId.
     * @deny (get, update, delete) - If the user's UID does not match the userId.
     * @principle Enforces document ownership and prevents unauthorized access to test reports.
     */
    match /users/{userId}/testReports/{testReportId} {
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.enteredBy == userId;
      allow get, update, delete: if isSignedIn() && isExistingOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Rules for the root-level testReports collection.  This is where admin users can see all reports.
     * @path /testReports/{testReportId}
     * @allow (get, list) - If the user is an admin.
     * @deny (create, update, delete) - Always deny direct write access to this collection to prevent bypassing ownership.
     * @principle Restricts write access to prevent unauthorized modification of reports; read access allowed for admins only.
     */
    match /testReports/{testReportId} {
      allow get, list: if isSignedIn() && isAdmin();
      allow create, update, delete: if false;
    }
  }
}