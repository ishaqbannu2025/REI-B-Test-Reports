/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for test reports,
 *              with public read access to a limited subset of report data.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, with 'userId' matching the Firebase Auth UID.
 * - /users/{userId}/testReports/{reportId}: Stores individual test reports created by a specific user.
 * - /testReports (Collection Group): Enables querying all test reports for public verification purposes.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Users can only create, update, and delete their own test reports.
 * - A limited subset of test report data (TestReportPublic) is publicly readable via the /testReports collection group.
 * - Listing all users is disallowed to prevent data exposure.
 * - TestReport documents denormalize the `enteredBy` field for authorization purposes.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to manage their own profile data.
     * @path /users/{userId}
     * @allow (create) If the authenticated user's UID matches the 'userId' and the 'uid' in the document.
     * @allow (get, update, delete) If the authenticated user's UID matches the 'userId'.
     * @deny (list) Listing all users is not permitted.
     * @deny (create) If the authenticated user's UID does not match the 'userId'.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get, update, delete: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;
      allow list: if false;
    }

    /**
     * @description Allows users to manage their own test reports.
     * @path /users/{userId}/testReports/{reportId}
     * @allow (create) If the authenticated user's UID matches the 'userId' and the 'enteredBy' field in the document.
     * @allow (get, update, delete) If the authenticated user's UID matches the 'userId' and the document exists.
     * @deny (list) Listing all test reports for a user is permitted.
     * @deny (create) If the authenticated user's UID does not match the 'userId'.
     * @principle Enforces document ownership for test reports.
     */
    match /users/{userId}/testReports/{reportId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.enteredBy == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && resource.data.enteredBy == request.resource.data.enteredBy;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to a limited subset of test report data.
     * @path /testReports/{reportId}
     * @allow (get, list) Public read access is allowed.
     * @deny (create, update, delete) Only the owner can create, update, or delete test reports.
     * @principle Allows public verification of test reports while restricting write access.
     */
    match /testReports/{reportId} {
       allow get, list: if true;
       allow create, update, delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}