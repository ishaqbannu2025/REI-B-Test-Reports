/**
 * @file Overview
 * This ruleset enforces a user-ownership model for test reports nested under user documents,
 * with public read access to the 'testReports' collection group for verification purposes.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, with 'userId' matching the Firebase Auth UID.
 * - /users/{userId}/testReports/{reportId}: Stores individual test reports created by the user.
 *
 * Key Security Decisions:
 * - Users can only create, update, or delete their own test reports.
 * - Public read access (get, list) is granted to the 'testReports' collection group for verification.
 * - The 'enteredBy' field in the TestReport must match the userId to enforce ownership.
 * - Only authenticated users can create test reports.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by an authenticated user.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user's UID matches the ownerId of the existing document.
     */
    function isExistingOwner(ownerId) {
      return isOwner(ownerId) && resource != null;
    }

    /**
     * @description
     * Rules for user profiles.
     *
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their own profile.
     * @deny (create) User with UID 'user123' cannot create a profile with a different ID 'user456'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description
     * Rules for test reports nested under a specific user.
     *
     * @path /users/{userId}/testReports/{reportId}
     * @allow (create) User with UID 'user123' can create a test report under their user document.
     * @deny (create) User with UID 'user123' cannot create a test report under a different user document ('user456').
     * @principle Enforces document ownership and signed-in state for writes.
     */
    match /users/{userId}/testReports/{reportId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.enteredBy == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.enteredBy == resource.data.enteredBy;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description
     * Rules for the 'testReports' collection group, allowing public reads for verification.
     *
     * @path /testReports
     * @allow (get, list) Any user can read test reports for verification.
     * @deny (create, update, delete) No user can create, update, or delete test reports directly at the root.  These actions must be performed under a specific user document.
     * @principle Allows public reads while restricting writes.
     */
    match /testReports/{reportId} {
      allow get: if true;
      allow list: if true;

      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}