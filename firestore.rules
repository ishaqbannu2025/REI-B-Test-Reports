rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own profile data, and allows admins to read any user profile.
     * @path /users/{userId}
     * @allow (get, update, delete) if isSignedIn() && (isOwner(userId) || isAdmin())
     * @allow (create) if isSignedIn() && isSelfCreation(userId)
     * @allow (list) if false
     * @deny (get) if !isSignedIn()
     * @deny (create, update, delete) if !isSignedIn()
     * @principle Enforces document ownership for writes and read access for admins.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow list: if false;
      allow create: if isSignedIn() && isSelfCreation(userId);
      allow update: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow delete: if isSignedIn() && (isOwner(userId) || isAdmin());
    }

    /**
     * @description Allows admins to list test reports through collection group query. Individual document access is not directly controlled here.
     * @path /testReports/{reportId}
     * @allow (list) if isAdmin()
     * @deny (get, create, update, delete) if true
     * @principle Restricts collection group access to admins only.
     */
    match /{path=**}/testReports/{reportId} {
        allow get: if isAdmin();
        allow list: if isAdmin();
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isSelfCreation(userId) {
        return request.auth.uid == userId && request.resource.data.uid == request.auth.uid;
    }

    function isAdmin() {
      return request.auth.token.role == 'Admin';
    }
  }
}