/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for test reports, combined with
 * public read access to test reports for verification purposes. Users can only
 * manage their own test reports, while admins (not yet implemented but planned)
 * would have broader access.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. 'userId' matches the Firebase Auth UID.
 * - /users/{userId}/testReports/{reportId}: Stores test reports created by the user.
 * - /testReports/{reportId}: This path is technically part of a Collection Group and
 *   represents all testReports across all users.
 *
 * Key Security Decisions:
 * - Public Read for Test Reports: Test reports are publicly readable to allow for verification.
 *   Write access is restricted to the owner.
 * - User Listing Disallowed: Listing all users is not permitted to prevent information leakage.
 * - TestReportPublic: This entity is defined but not currently used in the data model/structure.
 *
 * Denormalization for Authorization:
 * - Each testReport document will need to include an `enteredBy` field that matches the
 *   UID of the user who created it. This is essential for write authorization rules.
 *
 * Structural Segregation:
 * - The current structure uses a collection group ('testReports') to allow public read access
 *   to all test reports.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows management of user profile information.
     * @path /users/{userId}
     * @allow (create) User with UID 'test_user' can create their own profile.
     * @deny (create) User with UID 'other_user' cannot create a profile with ID 'test_user'.
     * @allow (get, list, update, delete) User with UID 'test_user' can read, update, and delete their own profile.
     * @deny (get, list, update, delete) User with UID 'other_user' cannot read, update, or delete the profile with ID 'test_user'.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false; // Disallow listing all users
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isOwner(userId) && resource.data.uid == userId;
      allow delete: if isOwner(userId) && resource.data.uid == userId;
    }

    /**
     * @description Allows public read access to test reports while restricting write access to the owner.
     * @path /testReports/{reportId}
     * @allow (get, list) Any user can read any test report.
     * @allow (create) User with UID 'test_user' can create a test report with enteredBy 'test_user'.
     * @deny (create) User with UID 'other_user' cannot create a test report with enteredBy 'test_user'.
     * @allow (update, delete) User with UID 'test_user' can update/delete a test report they created (enteredBy 'test_user').
     * @deny (update, delete) User with UID 'other_user' cannot update/delete a test report created by 'test_user'.
     * @principle Allows public read access, enforces document ownership for writes, and validates relational integrity.
     */
    match /testReports/{reportId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(enteredBy) {
        return request.auth.uid == enteredBy;
      }
       function isExistingOwner(enteredBy) {
        return isOwner(enteredBy) && resource != null;
      }
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.enteredBy == request.auth.uid;
      allow update: if isExistingOwner(resource.data.enteredBy);
      allow delete: if isExistingOwner(resource.data.enteredBy);
    }
     /**
     * @description Allows user to list their own test reports.
     * @path /users/{userId}/testReports/{reportId}
     * @allow (list) User with UID 'test_user' can list test reports under /users/test_user/testReports.
     * @deny (list) User with UID 'other_user' cannot list test reports under /users/test_user/testReports.
     *
     */
      match /users/{userId}/testReports/{reportId}{
           function isOwner(userId) {
        return request.auth.uid == userId;
      }
       allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.enteredBy == request.auth.uid;
      allow update: if isOwner(userId) && resource.data.enteredBy == request.auth.uid;
      allow delete: if isOwner(userId) && resource.data.enteredBy == request.auth.uid;
      }
  }
}