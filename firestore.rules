/**
 * @description This ruleset enforces a strict user-ownership model for test reports, with public read access to a subset of report data.
 * All data is nested under /users/{userId}, with a top-level /testReports collection for public access.
 * @dataStructure
 * - /users/{userId}: Stores user profiles, with 'userId' matching the Firebase Auth UID.
 * - /users/{userId}/testReports/{reportId}: Stores test reports created by a specific user.
 * - /testReports/{reportId}: Stores publicly accessible test report data.
 * @keySecurityDecisions
 * - Users can only create, update, or delete their own test reports.
 * - A top-level `testReports` collection allows public read access to a subset of test report data for verification purposes.
 * - Data Entry Users can create and read test reports. Admin Users can create, read, update, and delete test reports.
 * @denormalizationForAuthorization
 * - The `TestReport` entity must include an `enteredBy` field that stores the user ID of the report creator. This is essential for enforcing ownership in the rules.
 * @structuralSegregation
 * - Private test report data is stored under the user's document (`/users/{userId}/testReports/{reportId}`), while public data is stored in a top-level collection (`/testReports/{reportId}`).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows access to user documents based on ownership.
     * @path /users/{userId}
     * @allow (create) User with UID 'test_user' can create their own profile if request.auth.uid == 'test_user'.
     * @allow (get) User with UID 'test_user' can read their profile.
     * @deny (create) User with UID 'another_user' cannot create a profile for 'test_user'.
     * @deny (update) User with UID 'another_user' cannot update the profile for 'test_user'.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if false;
    }

    /**
     * @description Allows a user to manage their own test reports.
     * @path /users/{userId}/testReports/{reportId}
     * @allow (create) User with UID 'test_user' can create a test report under their profile.
     * @allow (get) User with UID 'test_user' can read a test report under their profile.
     * @deny (create) User with UID 'another_user' cannot create a test report for 'test_user'.
     * @deny (update) User with UID 'another_user' cannot update a test report for 'test_user'.
     * @principle Enforces document ownership for writes, restricts listing to owners, and validates relational integrity.
     */
    match /users/{userId}/testReports/{reportId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to test reports for verification purposes, with owner-only writes.
     * @path /testReports/{reportId}
     * @allow (get) Any user can read a test report.
     * @allow (list) Any user can list test reports.
     * @allow (create) User with UID 'test_user' can create a test report if request.resource.data.enteredBy == 'test_user'.
     * @deny (create) User with UID 'another_user' cannot create a test report with enteredBy set to 'test_user'.
     * @deny (update) User with UID 'another_user' cannot update a test report created by 'test_user'.
     * @principle Allows public read access with restricted writes based on ownership.
     */
    match /testReports/{reportId} {
      function isOwner(ownerId) {
        return request.auth.uid == ownerId;
      }
      function isCreatingWithOwnerId() {
        return request.resource.data.enteredBy == request.auth.uid;
      }
      function isExistingOwner(ownerId) {
        return isOwner(ownerId) && resource != null;
      }
      allow get: if true;
      allow list: if true;
      allow create: if isCreatingWithOwnerId();
      allow update: if isExistingOwner(resource.data.enteredBy);
      allow delete: if isExistingOwner(resource.data.enteredBy);
    }
  }
}