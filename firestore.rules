rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure the `/users/{userId}` document.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their own user document.
     * @allow (get) User with UID 'user123' can read their own user document.
     * @allow (update) User with UID 'user123' can update their own user document.
     * @allow (delete) User with UID 'user123' can delete their own user document.
     * @deny (create) User with UID 'user456' cannot create a user document for 'user123'.
     * @deny (get) User with UID 'user456' cannot read the user document of 'user123'.
     * @deny (update) User with UID 'user456' cannot update the user document of 'user123'.
     * @deny (delete) User with UID 'user456' cannot delete the user document of 'user123'.
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Prevent listing all users.

      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Secure the `/users/{userId}/testReports/{testReportId}` document.
     * @path /users/{userId}/testReports/{testReportId}
     * @allow (create) User with UID 'user123' can create a test report in their own user subcollection.
     * @allow (get) User with UID 'user123' can read a test report in their own user subcollection.
     * @allow (update) User with UID 'user123' can update a test report in their own user subcollection.
     * @allow (delete) User with UID 'user123' can delete a test report in their own user subcollection.
     * @deny (create) User with UID 'user456' cannot create a test report in the user subcollection of 'user123'.
     * @deny (get) User with UID 'user456' cannot read a test report in the user subcollection of 'user123'.
     * @deny (update) User with UID 'user456' cannot update a test report in the user subcollection of 'user123'.
     * @deny (delete) User with UID 'user456' cannot delete a test report in the user subcollection of 'user123'.
     * @principle Enforces document ownership for writes and reads within a user's subcollection.
     */
    match /users/{userId}/testReports/{testReportId} {
      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allow admins to query all test reports using a collection group query.
     * @path /databases/{database}/documents/**/testReports/{testReportId}
     * @allow (list) Authenticated user can list test reports via collection group query.
     * @deny (list) Unauthenticated user cannot list test reports.
     * @principle Enables administrative access via collection group queries.
     */
    match /{path=**}/testReports/{testReportId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();

      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource.data.id == request.auth.uid;
    }
  }
}