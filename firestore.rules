/**
 * @fileoverview Firestore Security Rules for Test Report Management
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for test reports,
 * combined with public read access to specific test report data.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles.
 * - /users/{userId}/testReports/{reportId}: Stores test reports owned by a specific user.
 *
 * Key Security Decisions:
 * - Users can only create, update, or delete their own test reports.
 * - Public read access is granted to the 'testReports' collection group, for specific fields of test reports.
 * - Listing all users is disallowed to protect user privacy.
 *
 * Denormalization for Authorization:
 * The `enteredBy` field in the TestReport entity is used to explicitly
 * link a test report to a specific user. This enables efficient ownership
 * checks without requiring additional database reads.
 *
 * Structural Segregation:
 * User profiles are stored in a private collection `/users/{userId}`, while
 * a subset of the test report data is made publicly accessible through
 * the 'testReports' collection group. This ensures that sensitive user data
 * is not exposed publicly.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Secures user profile data. Users can only read and write their own profile.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their own profile.
     * @allow (get) User with UID 'user123' can read their own profile.
     * @allow (update) User with UID 'user123' can update their own profile.
     * @allow (delete) User with UID 'user123' can delete their own profile.
     * @deny (create) User with UID 'user123' cannot create a profile for another user ('user456').
     * @deny (get) User with UID 'user123' cannot read another user's profile ('user456').
     * @deny (update) User with UID 'user123' cannot update another user's profile ('user456').
     * @deny (delete) User with UID 'user123' cannot delete another user's profile ('user456').
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Prevent listing all users.
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Secures test reports within a user's subcollection.
     * Users can create, read, update, and delete their own test reports.
     * @path /users/{userId}/testReports/{reportId}
     * @allow (create) User with UID 'user123' can create a test report in their own collection.
     * @allow (get) User with UID 'user123' can read a test report in their own collection.
     * @allow (update) User with UID 'user123' can update a test report in their own collection.
     * @allow (delete) User with UID 'user123' can delete a test report in their own collection.
     * @deny (create) User with UID 'user123' cannot create a test report in another user's collection ('user456').
     * @deny (get) User with UID 'user123' cannot read a test report in another user's collection ('user456').
     * @deny (update) User with UID 'user123' cannot update a test report in another user's collection ('user456').
     * @deny (delete) User with UID 'user123' cannot delete a test report in another user's collection ('user456').
     * @principle Enforces document ownership for writes, restricting access to a user's own data tree.
     */
    match /users/{userId}/testReports/{reportId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && request.resource.data.enteredBy == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.enteredBy == resource.data.enteredBy;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants public read access to the 'testReports' collection group.
     * Allows listing and getting of test reports.
     *  Note: This allows listing across all users, so only public data should be exposed.
     * @path /testReports/{reportId}
     * @allow (get) Any user can get a test report.
     * @allow (list) Any user can list test reports.
     * @deny (create) No one can directly create in this collection group.
     * @deny (update) No one can directly update in this collection group.
     * @deny (delete) No one can directly delete in this collection group.
     * @principle Provides public read access while restricting writes.
     */
    match /testReports/{reportId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}