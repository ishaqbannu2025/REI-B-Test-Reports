/**
 * @fileoverview Firestore Security Rules for the electrical test reports application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for test reports,
 * where users can only access the test reports they have created.
 * Administrative access is not implemented in this prototype.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, with 'userId' matching the Firebase Auth UID.
 * - /users/{userId}/testReports/{testReportId}: Stores test reports created by the specified user.
 *
 * Key Security Decisions:
 * - Users can only list test reports within their own user subcollection.
 * - No administrative roles are currently implemented.
 * - Data shape is not strictly validated in this prototype.
 *
 * Denormalization for Authorization:
 * - Test reports are stored under a user's subcollection to simplify ownership checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of an existing document.
     */
    function isExistingOwner(userId) {
      return isSignedIn() && resource.data.uid == request.auth.uid;
    }
    
    /**
     * @description Rules for user profile documents.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their profile.
     *    request.auth.uid = 'user123'
     *    request.resource.data.uid = 'user123'
     * @deny (create) User with UID 'user123' cannot create a profile for 'user456'.
     *    request.auth.uid = 'user123'
     *    request.resource.data.uid = 'user456'
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == request.auth.uid;
      allow update: if isSignedIn() && isOwner(userId) && isExistingOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId) && isExistingOwner(userId);
    }

    /**
     * @description Rules for test report documents within a user's subcollection.
     * @path /users/{userId}/testReports/{testReportId}
     * @allow (create) User with UID 'user123' can create a test report.
     *    request.auth.uid = 'user123'
     * @deny (create) User with UID 'user123' cannot create a test report for another user.
     *    request.auth.uid = 'user456'
     * @principle Enforces document ownership for test reports.
     */
    match /users/{userId}/testReports/{testReportId} {
      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId) && isExistingOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId) && isExistingOwner(userId);
    }
  }
}