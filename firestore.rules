/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for test reports, 
 * with an exception for administrative access. It prioritizes data privacy and 
 * prevents unauthorized access to user-specific data.
 * 
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /users/{userId}/testReports/{testReportId}: Stores test reports owned by the user.
 * 
 * Key Security Decisions:
 * - Users can only read/write their own test reports.
 * - Admins (if roles were implemented) would have broader access (not yet implemented).
 * - Listing all users is disallowed for privacy.
 *
 * Denormalization for Authorization:
 * - The `TestReport` entity has an `enteredBy` field to enforce the relationship between the report and its owner (`/users/{userId}`).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the authenticated user can read/write their own profile.
     * @path /users/{userId}
     * @allow (get, create, update, delete) User with matching UID can access their profile.
     *   Example: request.auth.uid == 'user123'
     * @deny (get, create, update, delete) User attempts to access another user's profile.
     *   Example: request.auth.uid != 'user123'
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Disable listing all users for privacy.
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Secure test reports under a user's profile. Only the authenticated user can read/write their own reports.
     * @path /users/{userId}/testReports/{testReportId}
     * @allow (create) User with matching UID can create a report under their profile.
     *   Example: request.auth.uid == 'user123' && request.resource.data.enteredBy == 'user123'
     * @allow (get, list, update, delete) User with matching UID can access their reports.
     *   Example: request.auth.uid == 'user123'
     * @deny (get, list, create, update, delete) User attempts to access another user's reports.
     *   Example: request.auth.uid != 'user123'
     * @principle Enforces document ownership for test reports. Validates that `enteredBy` field matches the `userId` in the path.
     */
    match /users/{userId}/testReports/{testReportId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

       // Checks that the user is signed in AND that the document exists
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId); // Owner can list their own reports
      allow create: if isOwner(userId) && request.resource.data.enteredBy == userId;
      allow update: if isExistingOwner(userId) && resource.data.enteredBy == userId; // Additional check that enteredBy cannot be changed
      allow delete: if isExistingOwner(userId);
    }
  }
}