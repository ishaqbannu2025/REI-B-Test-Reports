/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model, with public read access to test reports and owner-only write access, and restricts user data to the owning user.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles, secured with owner-only access.
 * - /testReports/{reportId}: Collection group containing test reports.
 *
 * Key Security Decisions:
 * - Public read access to testReports collection group.
 * - testReports writes are restricted to the owner (the user who created the report).
 * - User listing is disallowed.
 * - All write operations require a verified authentication state.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided user ID.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user's ID matches the resource data's 'enteredBy' field.
     */
    function isReportOwner(enteredBy) {
      return request.auth.uid == enteredBy;
    }

    /**
     * @description Checks if the authenticated user's ID matches the resource data's 'enteredBy' field and the document exists.
     */
    function isExistingReportOwner(enteredBy) {
      return isReportOwner(enteredBy) && resource != null;
    }

    /**
     * @description Rules for user documents.
     * @path /users/{userId}
     * @allow (create) User with uid 'user123' can create their own profile.
     * @allow (get) User with uid 'user123' can read their own profile.
     * @deny (create) User with uid 'user456' cannot create a profile for user 'user123'.
     * @deny (update) User with uid 'user456' cannot update the profile for user 'user123'.
     * @deny (delete) User with uid 'user456' cannot delete the profile for user 'user123'.
     * @principle Enforces user-ownership for accessing user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isSignedIn() && isOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Rules for the testReports collection group. Allows public reads, but restricts writes to the report owner.
     * @path /testReports/{reportId}
     * @allow (get) Any user can read a test report.
     * @allow (list) Any user can list test reports.
     * @allow (create) User with uid 'user123' can create a test report with enteredBy: 'user123'.
     * @deny (create) User with uid 'user456' cannot create a test report with enteredBy: 'user123'.
     * @deny (update) User with uid 'user456' cannot update a test report created by 'user123'.
     * @deny (delete) User with uid 'user456' cannot delete a test report created by 'user123'.
     * @principle Allows public read access, but enforces document ownership for writes.
     */
    match /testReports/{reportId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isReportOwner(request.resource.data.enteredBy);
      allow update: if isSignedIn() && isExistingReportOwner(resource.data.enteredBy);
      allow delete: if isSignedIn() && isExistingReportOwner(resource.data.enteredBy);
    }
  }
}