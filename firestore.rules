/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a user-ownership model for user profiles and allows admins to read all test reports. Public read access is granted to the 'testReports' collection group.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles, with 'userId' matching the Firebase Auth UID.
 * - /users/{userId}/testReports/{reportId}: Stores test reports associated with a specific user.
 * - /testReports/{reportId}: Represents a collection group of all test reports across all users.
 *
 * Key Security Decisions:
 * - Users can only manage their own profile data.
 * - Admins (defined via custom claims) can read all test reports.
 * - The 'testReports' collection group allows public read access for verification purposes.
 * - Listing of users is disallowed.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user's UID matches the provided userId.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the current user is the owner of the existing document.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource.data.userId == request.auth.uid;
    }

    /**
     * @description Checks if the current user has the 'Admin' role.
     */
    function isAdmin() {
      return isSignedIn() && request.auth.token.role == 'Admin';
    }

    /**
     * @description Secures the user profile document.
     * @path /users/{userId}
     * @allow (create) - User 'abc' can create their own profile if request.auth.uid == 'abc'.
     * @allow (get, update, delete) - User 'abc' can read/update/delete their profile if request.auth.uid == 'abc'.
     * @deny (create) - User 'def' cannot create profile for user 'abc'.
     * @deny (list) - No one can list users.
     * @principle Enforces document ownership for writes and restricts access to a user's own data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Secures the testReports subcollection under a specific user.
     * @path /users/{userId}/testReports/{reportId}
     * @allow (create) - User 'abc' can create a test report under their profile. The 'enteredBy' field should match the userId.
     * @allow (get, update, delete) - User 'abc' can read/update/delete a test report under their profile.
     * @deny (create) - User 'def' cannot create a test report under user 'abc''s profile.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/testReports/{reportId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows public read access to all documents in the 'testReports' collection group,
     * but restricts writes to authorized users (owners and admins).
     *
     * @path /testReports/{reportId}
     * @allow (get, list) - Any user (signed in or not) can read all test reports.
     * @allow (create, update, delete) - Only the owner of the document can modify it.
     * @deny (create, update, delete) - Non-owners cannot modify the document.
     * @principle Allows public read access for verification purposes.
     */
    match /{path=**}/testReports/{reportId} {
      allow get, list: if true;
      allow create: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }
  }
}