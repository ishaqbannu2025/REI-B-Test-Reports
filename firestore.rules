/**
 * @fileoverview Firestore Security Rules for Electrical Test Reports Management
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for test reports nested under user profiles,
 * and restricts user management to authenticated users.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information; 'userId' must match the Firebase Auth UID.
 * - /users/{userId}/testReports/{testReportId}: Stores test reports created by the user.
 *
 * Key Security Decisions:
 * - Users can only manage their own profile data.
 * - Users can only create, read, update, and delete test reports under their own user ID.
 * - Listing all users is denied.
 * - Open read access to test reports is disallowed to ensure data privacy and prevent unauthorized access to potentially sensitive information.
 *
 * Denormalization for Authorization:
 *  - The `TestReport` entity has an `enteredBy` field, which is a reference to the User who created the report. This field is used to enforce ownership of test reports.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by an authenticated user.
     * @return {boolean} True if the user is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     * @param {string} userId - The user ID to compare against the authenticated user's UID.
     * @return {boolean} True if the user IDs match, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing document.
     * @param {string} userId - The user ID to compare against the authenticated user's UID.
     * @return {boolean} True if the user IDs match and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for the /users collection.
     * @path /users/{userId}
     * @allow (create) - Authenticated user with matching UID can create their own profile.
     * @allow (get, update, delete) - Authenticated user with matching UID can read, update, or delete their own profile.
     * @deny (list) - Listing all users is not allowed.
     * @deny (create) - Non-authenticated user can not create a profile
     * @principle Enforces document ownership and prevents unauthorized access to user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/testReports collection.
     * @path /users/{userId}/testReports/{testReportId}
     * @allow (create) - Authenticated user with matching UID can create test reports under their profile.
     * @allow (get, list, update, delete) - Authenticated user with matching UID can read, list, update, or delete test reports under their profile.
     * @deny (create) - Non-authenticated user can not create a test report
     * @principle Enforces document ownership for test reports and prevents unauthorized access.
     */
    match /users/{userId}/testReports/{testReportId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.enteredBy == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.enteredBy == resource.data.enteredBy;
      allow delete: if isExistingOwner(userId);
    }
  }
}