/**
 * @fileoverview Firestore Security Rules for Electrical Test Reports.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for test reports nested under user profiles,
 * and grants read-only access to user profiles. Global `list` access to `/users` is explicitly denied, as is often a privacy concern.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. 'userId' MUST match the Firebase Auth UID.
 * - /users/{userId}/testReports/{testReportId}: Stores test reports created by the specified user.
 *
 * Key Security Decisions:
 * - User profiles are readable by everyone but writable only by the owning user.
 * - Test reports are accessible only to the owning user.
 * - Collection Group queries allow admins to view all reports. (Not yet implemented - requires admin role).
 * - Listing all users is disallowed to protect user privacy.
 *
 * Denormalization for Authorization:
 *  - Each TestReport is stored under a user's subcollection. This simplifies ownership checks and prevents unauthorized data access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read their own profile and create their own profile.
     * @path /users/{userId}
     * @allow (get) User with matching UID can read their own profile.
     * @allow (create) User with matching UID can create their own profile.
     * @deny (update) User cannot update the id field of their user profile.
     * @deny (delete) User cannot delete their profile.
     * @deny (list) Listing all users is not allowed.
     * @principle Enforces document ownership for writes. Allows public read access.
     */
    match /users/{userId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id; // Enforce immutability of id.
      allow delete: if false;
    }

    /**
     * @description Allows users to manage their own test reports.
     * @path /users/{userId}/testReports/{testReportId}
     * @allow (create) User with matching UID can create test reports in their own profile.
     * @allow (update) User with matching UID can update test reports in their own profile.
     * @allow (delete) User with matching UID can delete test reports in their own profile.
     * @allow (get) User with matching UID can get test reports in their own profile.
     * @allow (list) User with matching UID can list test reports in their own profile.
     * @deny (create) User cannot create test reports in other user profiles.
     * @deny (update) User cannot update test reports in other user profiles.
     * @deny (delete) User cannot delete test reports in other user profiles.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/testReports/{testReportId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}