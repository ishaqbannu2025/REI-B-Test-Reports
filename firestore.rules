/**
 * @fileoverview Firestore Security Rules for Electrical Test Reports
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for test reports, where users can only manage reports they have created.
 * Administrative access is granted through collection group queries on `testReports`, allowing admins to view all reports.
 *
 * Data Structure:
 * - `/users/{userId}`: Stores user profile information. 'userId' matches the Firebase Auth UID.
 * - `/users/{userId}/testReports/{testReportId}`: Stores test reports created by the specified user.
 *
 * Key Security Decisions:
 * - Users can only list test reports within their own user subcollection or via Collection Group.
 * - Administrative access to all reports is enabled using Collection Group queries.
 * - Data validation is relaxed in this prototyping phase but will be strengthened later.
 *
 * Denormalization for Authorization:
 *  - The `TestReport` entity contains an `enteredBy` field, which holds the user ID of the report creator. This enables simple ownership checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to manage their profile information.
     * @path /users/{userId}
     * @allow (create) User with matching UID can create their profile.
     * @allow (get, update, delete) User with matching UID can access and manage their profile.
     * @deny (create) User cannot create a profile with a mismatched UID.
     * @deny (get, update, delete) User cannot access or manage other users' profiles.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow get, update, delete: if isOwner(userId) && resource != null;
      allow list: if false;
    }

    /**
     * @description Allows users to manage their own test reports.
     * @path /users/{userId}/testReports/{testReportId}
     * @allow (create) User with matching UID can create test reports under their profile.
     * @allow (get, update, delete) User with matching UID can access and manage their own test reports.
     * @deny (create) User cannot create test reports under other users' profiles.
     * @deny (get, update, delete) User cannot access or manage other users' test reports.
     * @principle Enforces document ownership for test reports.
     */
    match /users/{userId}/testReports/{testReportId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow create: if isOwner(userId) && request.resource.data.enteredBy == userId;
      allow get, update, delete: if isOwner(userId) && resource.data.enteredBy == userId && resource != null;
      allow list: if isOwner(userId);
    }

    /**
     * @description Allows listing all test reports.
     * @path /testReports collection group
     * @allow (list) Any authenticated user can list test reports.
     * @deny (get, create, update, delete) No direct access to individual test report documents via this path.
     * @principle Allows admins to access all reports via collection group queries.
     */
    match /{path=**}/testReports/{document} {
        allow list: if request.auth != null;
        allow get, create, update, delete: if false;
    }
  }
}